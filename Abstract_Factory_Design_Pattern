interface Vehicle {
    String getType();
}

class LuxuryVehicle implements Vehicle {
    protected String name;

    public LuxuryVehicle(String name) {
        this.name = name;
    }

    public String getType() {
        return "Luxury Vehicle: " + name;
    }
}

class BMW extends LuxuryVehicle {
    public BMW() {
        super("BMW");
    }
}
class Mercedes extends LuxuryVehicle {
    public Mercedes() {
        super("Mercedes");
    }
}
class Audi extends LuxuryVehicle {
    public Audi() {
        super("Audi");
    }
}

class OrdinaryVehicle implements Vehicle {
    protected String name;

    public OrdinaryVehicle(String name) {
        this.name = name;
    }

    public String getType() {
        return "Ordinary Vehicle: " + name;
    }
}

class Hyundai extends OrdinaryVehicle {
    public Hyundai() {
        super("Hyundai");
    }
}

class Alto extends OrdinaryVehicle {
    public Alto() {
        super("Alto");
    }
}

abstract class VehicleFactory {
    abstract Vehicle createVehicle(String type);
    static VehicleFactory getVehicleFactory(String type){
        if ("Luxury".equalsIgnoreCase(type)) {
            return new LuxuryVehicleFactory();
        } else if ("Ordinary".equalsIgnoreCase(type)) {
            return new OrdinaryVehicleFactory();
        }
        return null;
    }
}

class LuxuryVehicleFactory extends VehicleFactory {
    public Vehicle createVehicle(String type) {
        if ("BMW".equalsIgnoreCase(type)) {
            return new BMW();
        } else if ("Audi".equalsIgnoreCase(type)) {
            return new Audi();
        } else if ("Mercedes".equalsIgnoreCase(type)) {
            return new Mercedes();
        }
        return null;
    }
}

class OrdinaryVehicleFactory extends VehicleFactory {
    public Vehicle createVehicle(String type) {
        if ("Hyundai".equalsIgnoreCase(type)) {
            return new Hyundai();
        } else if ("Alto".equalsIgnoreCase(type)) {
            return new Alto();
        }
        return null;
    }
}

public class Main {
    public static void main(String[] args) {
        // Using LuxuryVehicleFactory to create luxury vehicles
        VehicleFactory fact = VehicleFactory.getVehicleFactory("Luxury");
        Vehicle bmw = fact.createVehicle("BMW");
        System.out.println(bmw.getType());  // Output: Luxury Vehicle: BMW

        Vehicle audi = fact.createVehicle("Audi");
        System.out.println(audi.getType());  // Output: Luxury Vehicle: Audi
        
        Vehicle mer = fact.createVehicle("Mercedes");
        System.out.println(mer.getType());  // Output: Luxury Vehicle: Mercedes

        // Using OrdinaryVehicleFactory to create ordinary vehicles
        VehicleFactory ordinaryFactory = VehicleFactory.getVehicleFactory("Ordinary");
        Vehicle hyundai = ordinaryFactory.createVehicle("Hyundai");
        System.out.println(hyundai.getType());  // Output: Ordinary Vehicle: Hyundai

        Vehicle alto = ordinaryFactory.createVehicle("Alto");
        System.out.println(alto.getType());  // Output: Ordinary Vehicle: Alto
    }
}
